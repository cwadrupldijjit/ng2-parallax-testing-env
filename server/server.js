"use strict";
const fs = require('fs');
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const chalk = require('chalk');
const port = 8888;
const pathToPublic = __dirname + '/../dist/';
let app = express();
app.use(bodyParser.json());
app.use(cors());
app.use((req, res, next) => {
    console.log(chalk.green.bold(`"${req.method}"`), chalk.magenta(req.originalUrl));
    if (req.method == 'GET' || req.baseUrl.match(/\.[a-z]+$/i)) {
        let filePath = __dirname;
        if (req.originalUrl.indexOf('/node_modules') !== -1)
            filePath += '/..' + req.originalUrl;
        else 
        /* tslint:enable */
        if (req.originalUrl.indexOf('/bower_components') !== -1)
            filePath += '/..' + req.originalUrl;
        else
            /* tslint:enable */
            filePath += '/../dist' + req.originalUrl;
        try {
            fs.accessSync(filePath, fs.F_OK);
            console.log(chalk.bold.cyan(filePath + '\n'));
        }
        catch (e) {
            console.log(chalk.bold.red('Error! Could not find file at path', req.originalUrl));
            console.log(chalk.bold.red('Tried to pull from ', filePath), '\n');
            return res.status(404);
        }
    }
    next();
});
app.use('/node_modules', express.static(__dirname + '/../node_modules'));
app.use('/*', express.static(pathToPublic));
// app.use('/system.config.js', (req, res) => { res.sendFile('system.config.js', {root: pathToPublic}) });
app.all(/^\/$/, (req, res) => {
    res.sendFile('index.html', { root: pathToPublic });
});
app.listen(port, () => {
    console.log('Server running and listening on port %s', port);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,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Q0FBQyxDQUFDLENBQUM7QUFFNUMsMEdBQTBHO0FBQzFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUc7SUFDckIsR0FBRyxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsRUFBQyxJQUFJLEVBQUUsWUFBWSxFQUFDLENBQUMsQ0FBQztBQUNyRCxDQUFDLENBQUMsQ0FBQztBQUVILEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFO0lBQ2IsT0FBTyxDQUFDLEdBQUcsQ0FBQyx5Q0FBeUMsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNqRSxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJzZXJ2ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XHJcbmltcG9ydCAqIGFzIGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XHJcbmltcG9ydCAqIGFzIGJvZHlQYXJzZXIgZnJvbSAnYm9keS1wYXJzZXInO1xyXG5pbXBvcnQgKiBhcyBjb3JzIGZyb20gJ2NvcnMnO1xyXG5pbXBvcnQgKiBhcyBjaGFsayBmcm9tICdjaGFsayc7XHJcblxyXG5jb25zdCBwb3J0ID0gODg4ODtcclxuY29uc3QgcGF0aFRvUHVibGljID0gX19kaXJuYW1lICsgJy8uLi9kaXN0Lyc7XHJcbmxldCBhcHAgPSBleHByZXNzKCk7XHJcblxyXG5hcHAudXNlKGJvZHlQYXJzZXIuanNvbigpKTtcclxuYXBwLnVzZShjb3JzKCkpO1xyXG5cclxuYXBwLnVzZSgocmVxLCByZXMsIG5leHQpID0+IHtcclxuXHRjb25zb2xlLmxvZyhjaGFsay5ncmVlbi5ib2xkKGBcIiR7cmVxLm1ldGhvZH1cImApLCBjaGFsay5tYWdlbnRhKHJlcS5vcmlnaW5hbFVybCkpO1xyXG5cdFxyXG5cdGlmIChyZXEubWV0aG9kID09ICdHRVQnIHx8IHJlcS5iYXNlVXJsLm1hdGNoKC9cXC5bYS16XSskL2kpKSB7XHJcblx0XHRsZXQgZmlsZVBhdGggPSBfX2Rpcm5hbWU7XHJcblx0XHRcclxuXHRcdGlmIChyZXEub3JpZ2luYWxVcmwuaW5kZXhPZignL25vZGVfbW9kdWxlcycpICE9PSAtMSlcclxuXHRcdFx0ZmlsZVBhdGggKz0gJy8uLicgKyByZXEub3JpZ2luYWxVcmw7XHJcblx0XHRcclxuXHRcdC8qIHRzbGludDpkaXNhYmxlICovXHJcblx0XHRlbHNlIFxyXG5cdFx0LyogdHNsaW50OmVuYWJsZSAqL1xyXG5cdFx0aWYgKHJlcS5vcmlnaW5hbFVybC5pbmRleE9mKCcvYm93ZXJfY29tcG9uZW50cycpICE9PSAtMSlcclxuXHRcdFx0ZmlsZVBhdGggKz0gJy8uLicgKyByZXEub3JpZ2luYWxVcmw7XHJcblx0XHRcclxuXHRcdC8qIHRzbGludDpkaXNhYmxlICovXHJcblx0XHRlbHNlIFxyXG5cdFx0LyogdHNsaW50OmVuYWJsZSAqL1xyXG5cdFx0XHRmaWxlUGF0aCArPSAnLy4uL2Rpc3QnICsgcmVxLm9yaWdpbmFsVXJsO1xyXG5cdFx0XHJcblx0XHR0cnkge1xyXG5cdFx0XHRmcy5hY2Nlc3NTeW5jKGZpbGVQYXRoLCAoPGFueT4gZnMpLkZfT0spO1xyXG5cdFx0XHRjb25zb2xlLmxvZyhjaGFsay5ib2xkLmN5YW4oZmlsZVBhdGggKyAnXFxuJykpO1xyXG5cdFx0fSBjYXRjaCAoZSkge1xyXG5cdFx0XHRjb25zb2xlLmxvZyhjaGFsay5ib2xkLnJlZCgnRXJyb3IhIENvdWxkIG5vdCBmaW5kIGZpbGUgYXQgcGF0aCcsIHJlcS5vcmlnaW5hbFVybCkpO1xyXG5cdFx0XHRjb25zb2xlLmxvZyhjaGFsay5ib2xkLnJlZCgnVHJpZWQgdG8gcHVsbCBmcm9tICcsIGZpbGVQYXRoKSwgJ1xcbicpO1xyXG5cdFx0XHRcclxuXHRcdFx0cmV0dXJuIHJlcy5zdGF0dXMoNDA0KTtcclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0bmV4dCgpO1xyXG59KTtcclxuXHJcbmFwcC51c2UoJy9ub2RlX21vZHVsZXMnLCBleHByZXNzLnN0YXRpYyhfX2Rpcm5hbWUgKyAnLy4uL25vZGVfbW9kdWxlcycpKTtcclxuYXBwLnVzZSgnLyonLCBleHByZXNzLnN0YXRpYyhwYXRoVG9QdWJsaWMpKTtcclxuXHJcbi8vIGFwcC51c2UoJy9zeXN0ZW0uY29uZmlnLmpzJywgKHJlcSwgcmVzKSA9PiB7IHJlcy5zZW5kRmlsZSgnc3lzdGVtLmNvbmZpZy5qcycsIHtyb290OiBwYXRoVG9QdWJsaWN9KSB9KTtcclxuYXBwLmFsbCgvXlxcLyQvLCAocmVxLCByZXMpID0+IHtcclxuICAgIHJlcy5zZW5kRmlsZSgnaW5kZXguaHRtbCcsIHtyb290OiBwYXRoVG9QdWJsaWN9KTtcclxufSk7XHJcblxyXG5hcHAubGlzdGVuKHBvcnQsICgpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKCdTZXJ2ZXIgcnVubmluZyBhbmQgbGlzdGVuaW5nIG9uIHBvcnQgJXMnLCBwb3J0KTtcclxufSk7Il19
